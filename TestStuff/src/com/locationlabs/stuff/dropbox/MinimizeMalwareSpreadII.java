package com.locationlabs.stuff.dropbox;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * Created by manjeet.singh on 7/23/19.
 */
public class MinimizeMalwareSpreadII {
   private static int minMalwareSpread(int[][] graph, int[] initial) {
      if (graph == null || graph.length == 0
              || initial == null || initial.length == 0) {
         return 0;
      }

      Arrays.sort(initial);
      final Set<Integer> malwares = IntStream.of(initial).boxed().collect(Collectors.toSet());
      int max = Integer.MIN_VALUE;
      int result = initial[0];

      for (int infected : initial) {
         int save = 0;
         final Set<Integer> visited = new HashSet<>();
         visited.add(infected);
         for (int i = 0; i < graph[infected].length; i++) {
            if (i != infected && graph[infected][i] == 1) {
               int tmp = dfs(i, visited, malwares, graph);
               if (tmp < 0) {
                  continue;
               }
               save += tmp;
            }
         }
         if (save > max) {
            max = save;
            result = infected;
         }
      }

      return result;
   }

   private static int dfs(int node, Set<Integer> visited, Set<Integer> malwares, int[][] graph) {
      if (visited.contains(node)) {
         return 0;
      }

      if (malwares.contains(node)) {
         return -1;
      }

      int count = 1;
      visited.add(node);
      for (int i = 0; i < graph[node].length; i++) {
         if (i != node && graph[node][i] == 1) {
            int temp = dfs(i, visited, malwares, graph);
            if (temp == -1) {
               // has neighbor malware, marked as malware as well
               malwares.add(i);
               // return -1, indicating there's malware downstream in this branch, whole branch unqualified!
               return -1;
            }
            count += temp;
         }
      }
      return count;
   }

   public static void main(String[] args) {
      System.out.println(minMalwareSpread(new int[][]{{1, 1, 0}, {1, 1, 0}, {0, 0, 1}}, new int[]{0, 1}));
      System.out.println(minMalwareSpread(new int[][]{{1, 1, 0}, {1, 1, 1}, {0, 1, 1}}, new int[]{0, 1}));
      System.out.println(minMalwareSpread(new int[][]{{1, 1, 0, 0}, {1, 1, 1, 0}, {0, 1, 1, 1}, {0, 0, 1, 1}},
                                          new int[]{0, 1})
                        );
   }
}
